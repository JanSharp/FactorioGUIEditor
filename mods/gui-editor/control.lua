
require("__gui-editor__.depends")

if __DebugAdapter then
  __DebugAdapter.dumpIgnore{
    "@__phobos__/lib/LuaArgParser/arg_parser.lua",
    "@__phobos__/lib/LuaArgParser/classes.lua",
    "@__phobos__/lib/serpent.lua",
    "@__phobos__/optimize/create_inline_iife.lua",
    "@__phobos__/optimize/fold_const.lua",
    "@__phobos__/optimize/fold_control_statements.lua",
    "@__phobos__/ast_util.lua",
    "@__phobos__/ast_walker.lua",
    "@__phobos__/build_profile_arg_provider.lua",
    "@__phobos__/classes.lua",
    "@__phobos__/compiler.lua",
    "@__phobos__/constants.lua",
    "@__phobos__/control.lua",
    "@__phobos__/disassembler.lua",
    "@__phobos__/dump.lua",
    "@__phobos__/error_code_util.lua",
    "@__phobos__/formatter.lua",
    "@__phobos__/il_pretty_print.lua",
    "@__phobos__/indexed_linked_list.lua",
    "@__phobos__/intermediate_language.lua",
    "@__phobos__/jump_linker.lua",
    "@__phobos__/nodes.lua",
    "@__phobos__/opcode_util.lua",
    "@__phobos__/parser.lua",
    "@__phobos__/stack.lua",
    "@__phobos__/tokenize.lua",
    "@__phobos__/util.lua",
  }
end

local util = require("__gui-editor__.util")
local ll = require("__gui-editor__.linked_list")
local gui = require("__gui-editor__.gui")
local nodes = require("__gui-editor__.nodes")
local scripting = require("__gui-editor__.scripting")
local hierarchy = require("__gui-editor__.hierarchy")
local inspector = require("__gui-editor__.inspector")
local restart_manager = require("__gui-editor__.restart_manager")
local window_manager = require("__gui-editor__.window_manager")
local script_text_box = require("__gui-editor__.script_text_box")
local runner = require("__gui-editor__.runner")

script.on_event(defines.events.on_player_display_resolution_changed, function(event)
  window_manager.on_player_display_resolution_changed(event)
end)

script.on_event(defines.events.on_player_display_scale_changed, function(event)
  window_manager.on_player_display_scale_changed(event)
end)

---@param player LuaPlayer
local function init_player(player)
  local gvs = player.game_view_settings
  gvs.show_controller_gui = false
  gvs.show_minimap = false
  gvs.show_research_info = false
  gvs.show_entity_info = false
  gvs.show_alert_gui = false
  gvs.update_entity_selection = false
  gvs.show_rail_block_visualisation = false
  gvs.show_side_menu = false
  gvs.show_map_view_options = false
  gvs.show_quickbar = false
  gvs.show_shortcut_bar = false

  local background_rendering = rendering.draw_rectangle{
    color = {29, 29, 29},
    draw_on_ground = true,
    players = {player},
    surface = player.surface,
    filled = true,
    left_top = {player.position.x - 1000, player.position.y - 1000},
    right_bottom = {player.position.x + 1000, player.position.y + 1000},
  }

  local static_variables = scripting.create_script_variables("static_variables")
  local dynamic_variables = scripting.create_script_variables("dynamic_variables")
  ---@type PlayerData
  local player_data = {
    player = player,
    background_rendering = background_rendering,
    main_node = {
      id = 0,
      is_main = true,
      node_name = "root",
      children = ll.new_list(false),
      elem = player.gui.screen,
      node_fields = {
        static_variables = static_variables,
        dynamic_variables = dynamic_variables,
      },
      static_variables = static_variables,
      dynamic_variables = dynamic_variables,
    },
    -- later generated by updated_hierarchy, but not in create_hierarchy
    flat_nodes = {},
    selected_nodes = {},
    cursor_nodes = {},
    unresolved_variable_references = {},
    dirty_variables = {},
    nodes_by_id = {},
    next_node_id = 1,
  }
  static_variables.node = player_data.main_node
  dynamic_variables.node = player_data.main_node
  global.players[player.index] = player_data

  window_manager.init_player(player_data)
  script_text_box.init_player(player_data)
  runner.init_player(player_data)

  inspector.create_inspector(player_data)
  -- create hierarchy last for it to be the first front and active window
  hierarchy.create_hierarchy(player_data)

  local hierarchy_window = player_data.windows_by_type["hierarchy"][1]
  local inspector_window = player_data.windows_by_type["inspector"][1]
  local resolution = player_data.resolution
  local top_left = window_manager.anchors.top_left
  local top_right = window_manager.anchors.top_right

  window_manager.set_location_x_from_location(inspector_window, resolution.width, top_left)
  window_manager.set_size(inspector_window, {
    width = math.ceil(resolution.width * 0.25),
    height = resolution.height,
  }, top_right)

  local location_x = resolution.width - inspector_window.size.width
  window_manager.set_location_x_from_location(hierarchy_window, location_x, top_left)
  window_manager.set_size(hierarchy_window, {
    width = math.ceil(resolution.width * 0.25),
    height = resolution.height,
  }, top_right)

  window_manager.apply_location_and_size_changes(inspector_window)
  window_manager.apply_location_and_size_changes(hierarchy_window)
end

script.on_event(defines.events.on_player_created, function(event)
  local player = game.get_player(event.player_index)
  ---@cast player -nil
  init_player(player)
end)

script.on_event(defines.events.on_player_removed, function(event)
  global.players[event.player_index] = nil
end)

script.on_init(function()
  global.players = {}
  for _, player in pairs(game.players) do
    init_player(player)
  end
  game.tick_paused = true
end)

script.on_load(function()
  for _, player_data in pairs(global.players) do
    ---@param node Node
    local function walk_node(node)
      scripting.restore_variables(node.static_variables)
      scripting.restore_variables(node.dynamic_variables)
      local child_node = node.children.first
      while child_node do
        walk_node(child_node)
        child_node = child_node.next
      end
    end
    walk_node(player_data.main_node)
  end
end)

script.on_event(defines.events.on_tick, restart_manager.on_tick)

gui.register_for_all_gui_events()

script.on_event(defines.events.on_gui_click, function(event)
  window_manager.on_gui_click(event)
  gui.handle_gui_event(event)
end)

script.on_event("gui-editor-open-runner", function(event)
  local player = util.get_player(event)
  if not player then return end
  runner.activate_runner(player)
end)
